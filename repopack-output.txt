This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-11T14:36:58.325Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
jsconfig.json
LICENSE
next.config.mjs
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
src/app/api/preview-products/route.js
src/app/api/process-csv/route.js
src/app/api/scrape/route.js
src/app/globals.css
src/app/layout.js
src/app/page.js
src/app/preview/page.js
src/services/scraper.js
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Irving Jose Duran

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
    reactStrictMode: true,
    swcMinify: true,
    async headers() {
      return [
        {
          source: '/api/:path*',
          headers: [
            { key: 'Access-Control-Allow-Credentials', value: 'true' },
            { key: 'Access-Control-Allow-Origin', value: '*' },
            { key: 'Access-Control-Allow-Methods', value: 'GET,POST,OPTIONS' },
            { key: 'Access-Control-Allow-Headers', value: 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version' },
          ]
        }
      ];
    },
    // Add proxy configuration for development
    async rewrites() {
      return [
        {
          source: '/api/:path*',
          destination: '/api/:path*',
        },
      ];
    }
  };
  
  // Use export default
  export default nextConfig;

================
File: package.json
================
{
  "name": "product-scrapper",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "axios": "^1.7.7",
    "cheerio": "^1.0.0",
    "file-saver": "^2.0.5",
    "lucide-react": "^0.456.0",
    "next": "15.0.3",
    "papaparse": "^5.4.1",
    "playwright": "^1.40.1",
    "react": "19.0.0-rc-66855b96-20241106",
    "react-dom": "19.0.0-rc-66855b96-20241106"
  },
  "devDependencies": {
    "eslint": "^8",
    "eslint-config-next": "15.0.3",
    "postcss": "^8",
    "tailwindcss": "^3.4.1"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: src/app/api/preview-products/route.js
================
// src/app/api/preview-products/route.js
import { NextResponse } from 'next/server';

const DEMO_PRODUCTS = [
  {
    Handle: 'amazon-b0bpsgjn7t',
    Title: 'Example Product 1',
    'Body (HTML)': '<p>This is a demo product description.</p>',
    Vendor: 'Amazon Import',
    'Product Category': 'Electronics',
    Type: 'Physical',
    Price: '29.99',
    'Image Src': '/api/placeholder/400/400',
    Status: 'active'
  },
  {
    Handle: 'amazon-b0bpsgjn7t2',
    Title: 'Example Product 2',
    'Body (HTML)': '<p>Another demo product description.</p>',
    Vendor: 'Amazon Import',
    'Product Category': 'Electronics',
    Type: 'Physical',
    Price: '39.99',
    'Image Src': '/api/placeholder/400/400',
    Status: 'active'
  }
];

export async function GET(request) {
  return NextResponse.json({
    success: true,
    products: DEMO_PRODUCTS
  });
}

================
File: src/app/api/process-csv/route.js
================
// src/app/api/process-csv/route.js
import { NextResponse } from "next/server";
import axios from "axios";
import * as cheerio from "cheerio";
import Papa from "papaparse";

export const dynamic = "force-dynamic";

// Convert scraped product data to Shopify format
function convertToShopifyFormat(productData, url) {
  const asin = url.match(/\/dp\/([A-Z0-9]+)/i)?.[1] || "";
  const baseHandle = asin.toLowerCase();
  const shopifyProducts = [];

  // Base product data
  const baseProduct = {
    Handle: baseHandle,
    Title: productData.title || "",
    "Body (HTML)": createProductDescription(productData),
    Vendor: "Amazon Import",
    "Product Category": "Amazon Products",
    Type: "Physical",
    Tags: "amazon-import",
    Published: "TRUE",
    Status: "active",
  };

  if (productData.hasVariants && productData.variants.length > 0) {
    // Add variant information
    const firstVariant = productData.variants[0];

    // Determine option names based on what's available
    if (firstVariant.size) baseProduct["Option1 Name"] = "Size";
    if (firstVariant.color) baseProduct["Option2 Name"] = "Color";
    if (firstVariant.style) baseProduct["Option3 Name"] = "Style";

    // Create a row for each variant
    productData.variants.forEach((variant, index) => {
      const variantProduct = {
        ...baseProduct,
        "Option1 Value": variant.size || "",
        "Option2 Value": variant.color || "",
        "Option3 Value": variant.style || "",
        "Variant SKU": `${baseHandle}-${index + 1}`,
        "Variant Inventory Qty": "1",
        "Variant Inventory Policy": "deny",
        "Variant Fulfillment Service": "manual",
        "Variant Price": variant.price?.replace(/[^0-9.]/g, "") || "0.00",
        "Variant Requires Shipping": "TRUE",
        "Variant Taxable": "TRUE",
      };

      // Only include full product details in first variant
      if (index > 0) {
        variantProduct["Handle"] = baseHandle;
        variantProduct["Title"] = "";
        variantProduct["Body (HTML)"] = "";
      }

      shopifyProducts.push(variantProduct);
    });
  } else {
    // Single product without variants
    baseProduct["Option1 Name"] = "Title";
    baseProduct["Option1 Value"] = "Default Title";
    baseProduct["Variant SKU"] = baseHandle;
    baseProduct["Variant Price"] =
      productData.basePrice?.replace(/[^0-9.]/g, "") || "0.00";
    baseProduct["Variant Inventory Qty"] = "1";
    baseProduct["Variant Inventory Policy"] = "deny";
    baseProduct["Variant Fulfillment Service"] = "manual";
    baseProduct["Variant Requires Shipping"] = "TRUE";
    baseProduct["Variant Taxable"] = "TRUE";
    shopifyProducts.push(baseProduct);
  }

  // Add images
  if (productData.images && productData.images.length > 0) {
    productData.images.forEach((imageUrl, index) => {
      if (index === 0) {
        // Add first image to main product
        shopifyProducts[0]["Image Src"] = imageUrl;
        shopifyProducts[0]["Image Position"] = "1";
        shopifyProducts[0]["Image Alt Text"] = productData.title;
      } else {
        // Add additional images as separate rows
        shopifyProducts.push({
          Handle: baseHandle,
          "Image Src": imageUrl,
          "Image Position": (index + 1).toString(),
          "Image Alt Text": `${productData.title} - View ${index + 1}`,
        });
      }
    });
  }

  return shopifyProducts;
}

export async function POST(request) {
  try {
    const formData = await request.formData();
    const file = formData.get("file");

    if (!file) {
      return NextResponse.json(
        {
          error: true,
          message: "No file provided",
        },
        { status: 400 }
      );
    }

    // Read file content
    const text = await file.text();

    // First attempt with auto-detection
    let parsedResult = Papa.parse(text, {
      header: true,
      skipEmptyLines: true,
      encoding: "UTF-8",
      complete: (results) => results,
      error: (error) => {
        throw new Error(`CSV parsing error: ${error.message}`);
      },
    });

    // If first attempt fails, try with explicit delimiters
    if (parsedResult.errors.length > 0) {
      const delimiters = [",", ";", "\t", "|"];

      for (const delimiter of delimiters) {
        parsedResult = Papa.parse(text, {
          delimiter,
          header: true,
          skipEmptyLines: true,
          encoding: "UTF-8",
          complete: (results) => results,
          error: (error) => {
            throw new Error(`CSV parsing error: ${error.message}`);
          },
        });

        if (parsedResult.errors.length === 0 && parsedResult.data.length > 0) {
          break;
        }
      }
    }

    // Validate parsed data
    if (parsedResult.errors.length > 0) {
      return NextResponse.json(
        {
          error: true,
          message: "Failed to parse CSV file",
          details: parsedResult.errors,
        },
        { status: 400 }
      );
    }

    const data = parsedResult.data;

    // Validate if URL column exists
    const hasUrlColumn =
      data.length > 0 && (data[0].url || data[0].URL || data[0].Url);
    if (!hasUrlColumn) {
      return NextResponse.json(
        {
          error: true,
          message: 'CSV must contain a column named "url", "URL", or "Url"',
        },
        { status: 400 }
      );
    }

    // Process products
    const shopifyProducts = [];
    for (const row of data) {
      const productUrl = row.url || row.URL || row.Url;

      if (!productUrl) continue;

      try {
        if (shopifyProducts.length > 0) {
          await new Promise((resolve) => setTimeout(resolve, 2000));
        }

        const scrapedData = await scrapeProduct(productUrl);
        const productRows = convertToShopifyFormat(scrapedData, productUrl);
        shopifyProducts.push(...productRows);
      } catch (error) {
        console.error(`Error processing ${productUrl}:`, error);
      }
    }

    // Generate Shopify CSV
    const csv = Papa.unparse(shopifyProducts);

    // Return CSV file
    return new NextResponse(csv, {
      status: 200,
      headers: {
        "Content-Type": "text/csv",
        "Content-Disposition": 'attachment; filename="shopify_products.csv"',
      },
    });
  } catch (error) {
    console.error("Processing error:", error);
    return NextResponse.json(
      {
        error: true,
        message: error.message || "Failed to process CSV file",
      },
      { status: 500 }
    );
  }
}

async function scrapeProduct(url) {
  try {
    const cleanUrl = cleanAmazonUrl(url);
    const response = await axios.get(cleanUrl, {
      headers: {
        "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        Accept:
          "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.5",
        "Cache-Control": "no-cache",
      },
      timeout: 15000,
    });

    const $ = cheerio.load(response.data);

    // Extract all product images
    const images = [];

    // Main image
    const mainImage =
      $("#landingImage").attr("data-old-hires") ||
      $("#landingImage").attr("src") ||
      $("#imgBlkFront").attr("src");
    if (mainImage) images.push(mainImage);

    // Additional images
    $("#altImages img").each((i, el) => {
      const src = $(el).attr("src");
      if (src && src.includes("images/I/")) {
        const fullSizeUrl = src.replace(/\._[^_]*_\./, ".");
        if (!images.includes(fullSizeUrl)) {
          images.push(fullSizeUrl);
        }
      }
    });

    // Extract base price
    const basePrice =
      $(".a-price .a-offscreen").first().text().trim() ||
      $("#priceblock_ourprice").text().trim() ||
      $("#price_inside_buybox").text().trim();

    // Extract options and their details
    const variants = [];
    let hasVariants = false;

    // Size variants
    const sizeOptions = [];
    $("#variation_size_name select option").each((i, el) => {
      const size = $(el).text().trim();
      if (size && size !== "Select") {
        sizeOptions.push(size);
        hasVariants = true;
      }
    });

    // Color variants
    const colorOptions = [];
    $("#variation_color_name select option, #variation_color_name ul li").each(
      (i, el) => {
        const color = $(el).text().trim();
        if (color && color !== "Select") {
          colorOptions.push(color);
          hasVariants = true;
        }
      }
    );

    // Style variants
    const styleOptions = [];
    $("#variation_style_name select option").each((i, el) => {
      const style = $(el).text().trim();
      if (style && style !== "Select") {
        styleOptions.push(style);
        hasVariants = true;
      }
    });

    // Create variant combinations
    if (hasVariants) {
      if (sizeOptions.length > 0) {
        sizeOptions.forEach((size) => {
          if (colorOptions.length > 0) {
            colorOptions.forEach((color) => {
              variants.push({
                size,
                color,
                price: basePrice, // You might want to fetch specific variant prices if available
              });
            });
          } else {
            variants.push({
              size,
              price: basePrice,
            });
          }
        });
      } else if (colorOptions.length > 0) {
        colorOptions.forEach((color) => {
          variants.push({
            color,
            price: basePrice,
          });
        });
      }
    }

    // Extract product details
    const details = {};
    $("#productDetails_detailBullets_sections1 tr").each((i, el) => {
      const key = $(el).find("th").text().trim();
      const value = $(el).find("td").text().trim();
      details[key] = value;
    });

    // Extract features
    const features = $("#feature-bullets ul li")
      .map((i, el) => $(el).text().trim())
      .get()
      .filter((feature) => !feature.includes("video_pop_out"))
      .join("\n");

    return {
      title: $("#productTitle").text().trim() || null,
      basePrice: basePrice,
      rating: $("#acrPopover").attr("title") || null,
      availability: $("#availability").text().trim() || null,
      description: $("#productDescription p").text().trim() || null,
      features: features || null,
      images: images,
      variants: variants,
      hasVariants,
      options: {
        sizes: sizeOptions,
        colors: colorOptions,
        styles: styleOptions,
      },
      details,
    };
  } catch (error) {
    throw new Error(`Failed to scrape product: ${error.message}`);
  }
}

function cleanAmazonUrl(url) {
  try {
    const urlObj = new URL(url);
    const dpPath = urlObj.pathname.match(/\/dp\/([A-Z0-9]+)/i);
    if (!dpPath) {
      throw new Error("Invalid Amazon product URL");
    }
    return `https://www.amazon.com/dp/${dpPath[1]}`;
  } catch (e) {
    throw new Error("Invalid URL format");
  }
}

function createProductDescription(productData) {
  return `
    <div class="product-description">
      ${
        productData.description
          ? `
        <div class="description-section">
          <h3>Description</h3>
          <p>${productData.description}</p>
        </div>
      `
          : ""
      }

      ${
        productData.features
          ? `
        <div class="features-section">
          <h3>Features</h3>
          <ul>
            ${productData.features
              .split("\n")
              .map((feature) => `<li>${feature}</li>`)
              .join("")}
          </ul>
        </div>
      `
          : ""
      }

      ${
        Object.keys(productData.details || {}).length > 0
          ? `
        <div class="specifications-section">
          <h3>Product Details</h3>
          <ul>
            ${Object.entries(productData.details)
              .map(
                ([key, value]) => `<li><strong>${key}:</strong> ${value}</li>`
              )
              .join("")}
          </ul>
        </div>
      `
          : ""
      }

      ${
        productData.availability
          ? `
        <div class="availability-section">
          <p><strong>Availability:</strong> ${productData.availability}</p>
        </div>
      `
          : ""
      }

      ${
        productData.rating
          ? `
        <div class="rating-section">
          <p><strong>Rating:</strong> ${productData.rating}</p>
        </div>
      `
          : ""
      }
    </div>
  `.trim();
}

================
File: src/app/api/scrape/route.js
================
// src/app/api/scrape/route.js
import { NextResponse } from 'next/server';
import axios from 'axios';
import * as cheerio from 'cheerio';

export const dynamic = 'force-dynamic';

export async function POST(request) {
  try {
    // Parse request body
    const body = await request.json();
    const { url } = body;

    if (!url) {
      return NextResponse.json({
        error: true,
        message: 'URL is required'
      }, { status: 400 });
    }

    // Validate URL format
    try {
      new URL(url);
    } catch (e) {
      return NextResponse.json({
        error: true,
        message: 'Invalid URL format'
      }, { status: 400 });
    }

    // Configure axios
    const axiosConfig = {
      headers: {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'en-US,en;q=0.9',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
        'Sec-Ch-Ua': '"Not_A Brand";v="8", "Chromium";v="120"',
        'Sec-Ch-Ua-Mobile': '?0',
        'Sec-Ch-Ua-Platform': '"Windows"',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
      },
      timeout: 15000,
      maxRedirects: 5,
      validateStatus: (status) => status < 500,
    };

    console.log('Fetching URL:', url);
    
    // Make request to Amazon
    const response = await axios.get(url, axiosConfig);
    
    console.log('Response status:', response.status);
    console.log('Response type:', typeof response.data);
    
    // Validate response
    if (!response.data || typeof response.data !== 'string') {
      throw new Error('Invalid response format from Amazon');
    }

    // Load HTML with cheerio
    const $ = cheerio.load(response.data);
    
    console.log('HTML loaded successfully');

    // Extract data with validation
    const title = $('#productTitle').text().trim() || 
                 $('.product-title-word-break').text().trim() || 
                 $('h1.a-size-large').text().trim();

    const price = $('.a-price .a-offscreen').first().text().trim() ||
                 $('#priceblock_ourprice').text().trim() ||
                 $('#price_inside_buybox').text().trim() ||
                 $('.a-price .a-text-price').first().text().trim();

    // Add validation check
    if (!title && !price) {
      console.log('No product data found in response');
      return NextResponse.json({
        error: true,
        message: 'Unable to extract product information. The page might be protected or the structure has changed.'
      }, { status: 422 });
    }

    const productData = {
      title,
      price,
      rating: $('#acrPopover').attr('title') || 
              $('.a-icon-star').first().text().trim() || 
              'Not available',
      reviewCount: $('#acrCustomerReviewText').text().trim() || 
                  'No reviews available',
      availability: $('#availability').text().trim() || 
                   $('#deliveryMessageMirId').text().trim() || 
                   'Status not available',
      description: $('#productDescription p').text().trim() || 
                  $('#feature-bullets').text().trim() || 
                  'No description available',
      features: $('#feature-bullets ul li')
        .map((i, el) => $(el).text().trim())
        .get()
        .filter(item => item !== '')
    };

    console.log('Product data extracted successfully:', productData);

    return NextResponse.json(productData);

  } catch (error) {
    console.error('Detailed error:', {
      message: error.message,
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data ? 'Exists' : 'None'
    });

    // Handle specific error cases
    if (error.code === 'ECONNREFUSED') {
      return NextResponse.json({
        error: true,
        message: 'Failed to connect to Amazon. Please try again later.'
      }, { status: 503 });
    }

    if (error.code === 'ETIMEDOUT') {
      return NextResponse.json({
        error: true,
        message: 'Request timed out. Please try again.'
      }, { status: 504 });
    }

    if (error.response?.status === 403) {
      return NextResponse.json({
        error: true,
        message: 'Access denied by Amazon. This might be due to rate limiting.'
      }, { status: 403 });
    }

    return NextResponse.json({
      error: true,
      message: error.message || 'Failed to scrape product data',
      status: error.response?.status || 500
    }, { status: 500 });
  }
}

================
File: src/app/globals.css
================
/* src/app/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-rgb: 255, 255, 255;
}

html,
body {
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  color: rgb(var(--foreground-rgb));
  background: rgb(var(--background-rgb));
}

================
File: src/app/layout.js
================
// src/app/layout.js
import "./globals.css";

export const metadata = {
  title: "Amazon Product Scraper",
  description: "Batch scrape Amazon product data",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body suppressHydrationWarning>{children}</body>
    </html>
  );
}

================
File: src/app/page.js
================
// src/app/page.js
"use client";
import { useState, useRef } from "react";
import { useRouter } from "next/navigation";

const TestSection = () => {
  const downloadTemplate = () => {
    const csvContent =
      "url\nhttps://www.amazon.com/dp/B0BPSGJN7T\nhttps://www.amazon.com/dp/B09B8DQ26F";
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "amazon_urls_template.csv";
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
  };

  return (
    <div className="mb-8 space-y-6">
      <div className="p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-100">
        <h2 className="text-lg font-semibold mb-4">How it works:</h2>

        <div className="space-y-6">
          {/* Step 1 */}
          <div className="flex items-start space-x-4">
            <div className="w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center flex-shrink-0">
              1
            </div>
            <div className="flex-1">
              <h3 className="font-medium mb-2">
                Download & Prepare URL Template
              </h3>
              <p className="text-sm text-gray-600 mb-3">
                If you don&apos;t already have a CSV file with Amazon URLs.
                Download our template CSV and add your Amazon product URLs.
              </p>
              <button
                onClick={downloadTemplate}
                className="inline-flex items-center px-4 py-2 border border-blue-500 text-blue-500 rounded-md hover:bg-blue-50 transition-colors"
              >
                <svg
                  className="w-4 h-4 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
                  />
                </svg>
                Download Template
              </button>
            </div>
          </div>

          {/* Step 2 */}
          <div className="flex items-start space-x-4">
            <div className="w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center flex-shrink-0">
              2
            </div>
            <div className="flex-1">
              <h3 className="font-medium mb-2">Generate Shopify CSV</h3>
              <p className="text-sm text-gray-600">
                Upload your completed URL template above to generate a
                Shopify-compatible CSV with product data.
              </p>
            </div>
          </div>

          {/* Step 3 */}
          <div className="flex items-start space-x-4">
            <div className="w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center flex-shrink-0">
              3
            </div>
            <div className="flex-1">
              <h3 className="font-medium mb-2">Preview Generated Products</h3>
              <p className="text-sm text-gray-600 mb-3">
                Once generated, preview your products at the preview page to
                ensure everything looks correct.
              </p>
              <a
                href="/preview"
                className="inline-flex items-center px-4 py-2 border border-blue-500 text-blue-500 rounded-md hover:bg-blue-50 transition-colors"
              >
                <svg
                  className="w-4 h-4 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                  />
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                  />
                </svg>
                Visit Preview Page
              </a>
            </div>
          </div>

          {/* Step 4 */}
          <div className="flex items-start space-x-4">
            <div className="w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center flex-shrink-0">
              4
            </div>
            <div className="flex-1">
              <h3 className="font-medium mb-2">Import CSV To Shopify</h3>
              <p className="text-sm text-gray-600">
                Import the CSV file into your Shopify store
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default function Home() {
  const [file, setFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const router = useRouter();
  const fileInputRef = useRef(null);

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (
      selectedFile &&
      (selectedFile.type === "text/csv" || selectedFile.name.endsWith(".csv"))
    ) {
      setFile(selectedFile);
      setError(null);
    } else {
      setError("Please select a valid CSV file");
      setFile(null);
    }
  };

  const downloadSampleCsv = () => {
    const csvContent = "url\nhttps://www.amazon.com/dp/B0BPSGJN7T";
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "sample_amazon_urls.csv";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const loadDemoCsv = () => {
    router.push("/preview?demo=true");
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!file) return;

    setLoading(true);
    setError(null);

    try {
      const formData = new FormData();
      formData.append("file", file);

      const response = await fetch("/api/process-csv", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to process CSV");
      }

      // Handle CSV download
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "shopify_products.csv";
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (err) {
      setError(err.message || "An error occurred while processing the file");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="max-w-4xl mx-auto p-8">
        <h1 className="text-3xl font-bold mb-8">Amazon Product Scraper</h1>

        {/* How it works section
        <div className="mb-8 p-4 bg-blue-50 border border-blue-200 rounded">
          <h2 className="font-semibold mb-2">How it works:</h2>
          <ol className="list-decimal ml-4 space-y-2 text-sm">
            <li>Upload a CSV file with Amazon product URLs</li>
            <li>The scraper will collect product information</li>
            <li>Download the Shopify-compatible CSV file</li>
            <li>Import the CSV file into your Shopify store</li>
          </ol>
        </div> */}

        {/* File upload form */}
        <form onSubmit={handleSubmit} className="mb-8">
          <div className="flex flex-col gap-4">
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6">
              <input
                type="file"
                accept=".csv"
                onChange={handleFileChange}
                className="block w-full text-sm text-gray-500
                  file:mr-4 file:py-2 file:px-4
                  file:rounded-full file:border-0
                  file:text-sm file:font-semibold
                  file:bg-blue-50 file:text-blue-700
                  hover:file:bg-blue-100"
              />
            </div>

            <button
              type="submit"
              disabled={!file || loading}
              className="w-full md:w-auto px-6 py-3 bg-blue-500 text-white rounded shadow hover:bg-blue-600 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
            >
              {loading ? "Processing..." : "Process CSV"}
            </button>
          </div>
        </form>

        {/* Test it out section */}
        <TestSection />
        {error && (
          <div className="p-4 mb-4 bg-red-50 border border-red-200 text-red-700 rounded">
            {error}
          </div>
        )}
      </div>
    </div>
  );
}

================
File: src/app/preview/page.js
================
"use client";
import { useState } from "react";
import Papa from "papaparse";

export default function PreviewStorefront() {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const processCSVData = (data) => {
    // Group variants by Handle
    const groupedProducts = {};

    data.forEach((row) => {
      // Check if this is a main product row (has Title and Body)
      if (row.Title && row.Handle) {
        groupedProducts[row.Handle] = {
          Handle: row.Handle,
          Title: row.Title,
          "Body (HTML)": row["Body (HTML)"],
          Vendor: row.Vendor,
          "Product Category": row["Product Category"],
          Type: row.Type,
          Tags: row.Tags,
          Published: row.Published,
          "Image Src": row["Image Src"],
          "Image Alt Text": row["Image Alt Text"],
          "SEO Title": row["SEO Title"],
          "SEO Description": row["SEO Description"],
          "Option1 Name": row["Option1 Name"],
          "Variant Price": row["Variant Price"],
          "Variant Compare At Price": row["Variant Compare At Price"],
          "Variant Inventory Qty": row["Variant Inventory Qty"],
          variants: [],
        };
      }

      // If Handle exists but no Title, it's a variant
      if (row.Handle && !row.Title && groupedProducts[row.Handle]) {
        groupedProducts[row.Handle].variants.push({
          option: groupedProducts[row.Handle]["Option1 Name"],
          value: row["Option1 Value"],
          sku: row["Variant SKU"],
          price: row["Variant Price"],
          compareAtPrice: row["Variant Compare At Price"],
          inventory: row["Variant Inventory Qty"],
          weight: row["Variant Grams"],
          weightUnit: row["Variant Weight Unit"],
        });
      }
    });

    // Clean up products without variants
    Object.values(groupedProducts).forEach((product) => {
      // If the first row variant info is the main product info, don't treat it as a variant
      if (product.variants.length === 0 && product["Option1 Value"]) {
        const mainVariant = {
          option: product["Option1 Name"],
          value: product["Option1 Value"],
          sku: product["Variant SKU"],
          price: product["Variant Price"],
          compareAtPrice: product["Variant Compare At Price"],
          inventory: product["Variant Inventory Qty"],
          weight: product["Variant Grams"],
          weightUnit: product["Variant Weight Unit"],
        };
        product.variants = [mainVariant];
      }
    });

    return Object.values(groupedProducts);
  };

  const handleFileUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    setLoading(true);
    setError(null);

    try {
      const text = await file.text();
      console.log("CSV content:", text.substring(0, 200)); // Log first 200 chars for debugging

      const result = Papa.parse(text, {
        header: true,
        skipEmptyLines: true,
        transformHeader: (header) => header.trim(), // Trim whitespace from headers
        transform: (value) => value.trim(), // Trim whitespace from values
        error: (error) => {
          console.error("Papa Parse Error:", error);
          throw new Error(error.message);
        },
        complete: (results) => {
          console.log("Parse Results:", {
            rows: results.data.length,
            fields: results.meta.fields,
            errors: results.errors,
          });
        },
      });

      if (result.errors.length > 0) {
        console.error("Parse errors:", result.errors);
        throw new Error(
          `CSV parsing errors: ${result.errors
            .map((e) => e.message)
            .join(", ")}`
        );
      }

      if (!result.data || result.data.length === 0) {
        throw new Error("No data found in CSV file");
      }

      if (!result.meta.fields.includes("Handle")) {
        throw new Error("CSV must contain a Handle column");
      }

      const processedProducts = processCSVData(result.data);
      console.log("Processed products:", processedProducts);

      if (processedProducts.length === 0) {
        throw new Error("No valid products found in CSV");
      }

      setProducts(processedProducts);
    } catch (err) {
      console.error("Error processing file:", err);
      setError(err.message || "Failed to process CSV file");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <nav className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16 items-center">
            <span className="text-xl font-bold">Shopify CSV Preview</span>
          </div>
        </div>
      </nav>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-8">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Upload Shopify CSV File
          </label>
          <input
            type="file"
            accept=".csv"
            onChange={handleFileUpload}
            className="block w-full text-sm text-gray-500
              file:mr-4 file:py-2 file:px-4
              file:rounded-full file:border-0
              file:text-sm file:font-semibold
              file:bg-blue-50 file:text-blue-700
              hover:file:bg-blue-100"
          />
        </div>

        {loading && (
          <div className="text-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
            <p className="mt-4 text-gray-600">Loading products...</p>
          </div>
        )}

        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-8">
            {error}
          </div>
        )}

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {products.map((product) => (
            <div
              key={product.Handle}
              className="bg-white rounded-lg shadow overflow-hidden"
            >
              <div className="aspect-w-3 aspect-h-4 bg-gray-200">
                {product["Image Src"] ? (
                  <img
                    src={product["Image Src"]}
                    alt={product["Image Alt Text"] || product.Title}
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center bg-gray-100">
                    <span className="text-gray-400">No image</span>
                  </div>
                )}
              </div>
              <div className="p-4">
                <h3 className="text-lg font-medium text-gray-900">
                  {product.Title}
                </h3>

                <div className="mt-2 text-sm text-gray-500">
                  <p>Vendor: {product.Vendor}</p>
                  <p>Type: {product.Type}</p>
                  {product["Product Category"] && (
                    <p>Category: {product["Product Category"]}</p>
                  )}
                  {product.Tags && (
                    <div className="flex flex-wrap gap-1 mt-1">
                      {product.Tags.split(",").map((tag, index) => (
                        <span
                          key={index}
                          className="bg-gray-100 px-2 py-1 rounded-full text-xs"
                        >
                          {tag.trim()}
                        </span>
                      ))}
                    </div>
                  )}
                </div>

                {/* Variants */}
                {product.variants && product.variants.length > 0 ? (
                  <div className="mt-4">
                    <h4 className="font-medium text-sm mb-2">
                      Available {product.variants[0].option}s:
                    </h4>
                    <div className="grid grid-cols-2 gap-2">
                      {product.variants.map((variant, idx) => (
                        <div
                          key={variant.sku || idx}
                          className="border rounded p-2"
                        >
                          <p className="font-medium">{variant.value}</p>
                          <p className="text-sm">
                            ${parseFloat(variant.price).toFixed(2)}
                            {variant.compareAtPrice && (
                              <span className="line-through text-gray-500 ml-2">
                                ${parseFloat(variant.compareAtPrice).toFixed(2)}
                              </span>
                            )}
                          </p>
                          <p className="text-xs text-gray-500">
                            Stock: {variant.inventory}
                            {variant.weight && (
                              <span className="ml-2">
                                Weight: {variant.weight}
                                {variant.weightUnit}
                              </span>
                            )}
                          </p>
                        </div>
                      ))}
                    </div>
                  </div>
                ) : (
                  <div className="mt-4">
                    <p className="text-lg font-bold">
                      ${parseFloat(product["Variant Price"]).toFixed(2)}
                      {product["Variant Compare At Price"] && (
                        <span className="line-through text-gray-500 ml-2">
                          $
                          {parseFloat(
                            product["Variant Compare At Price"]
                          ).toFixed(2)}
                        </span>
                      )}
                    </p>
                    <p className="text-sm text-gray-600">
                      Stock: {product["Variant Inventory Qty"]}
                    </p>
                  </div>
                )}

                {product["SEO Description"] && (
                  <p className="mt-4 text-sm text-gray-600">
                    {product["SEO Description"]}
                  </p>
                )}
              </div>
            </div>
          ))}
        </div>
      </main>
    </div>
  );
}

================
File: src/services/scraper.js
================
// src/services/scraper.js
import { chromium } from 'playwright';
import * as cheerio from 'cheerio';

export async function scrapeTaobao(url) {
  const browser = await chromium.launch({
    headless: true
  });

  try {
    const context = await browser.newContext({
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
    });

    const page = await context.newPage();
    
    // Set extra headers
    await page.setExtraHTTPHeaders({
      'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',
    });

    await page.goto(url, {
      waitUntil: 'networkidle',
      timeout: 30000,
    });

    // Wait for main content to load
    await page.waitForSelector('.tb-main-title, .tb-detail-hd h1', {
      timeout: 5000,
    }).catch(() => console.log('Title selector timeout'));

    const content = await page.content();
    const $ = cheerio.load(content);

    const data = {
      title: $('.tb-main-title').text().trim() || 
             $('.tb-detail-hd h1').text().trim() ||
             null,
      price: $('.tm-price').text().trim() || 
             $('#J_StrPrice .tb-rmb-num').text().trim() ||
             null,
      description: $('.main-content').text().trim() || null,
      features: $('.attributes-list li').map((i, el) => $(el).text().trim()).get().join('\n') || null,
      platform: 'taobao'
    };

    return data;
  } finally {
    await browser.close();
  }
}

export async function scrapeAmazon(url) {
  const browser = await chromium.launch({
    headless: true
  });

  try {
    const context = await browser.newContext({
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
    });

    const page = await context.newPage();
    await page.goto(url, {
      waitUntil: 'networkidle',
      timeout: 30000,
    });

    const content = await page.content();
    const $ = cheerio.load(content);

    return {
      title: $('#productTitle').text().trim() || null,
      price: $('.a-price .a-offscreen').first().text().trim() || null,
      rating: $('#acrPopover').attr('title') || null,
      availability: $('#availability').text().trim() || null,
      description: $('#productDescription p').text().trim() || null,
      features: $('#feature-bullets ul li').map((i, el) => $(el).text().trim()).get().join('\n') || null,
      platform: 'amazon'
    };
  } finally {
    await browser.close();
  }
}

================
File: tailwind.config.js
================
// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
